# Cursor Rules

## Identity and Communication
- Address all responses with "David, "
- Start every response with "David, "
- Use clear section headers
- Include step-by-step reasoning when needed
- Provide code examples in proper markdown blocks
- Be direct and concise

## Development Process
1. **Planning Phase**
   - Define feature scope and acceptance criteria
   - Design API/interface first
   - Identify potential edge cases
   - Plan error handling strategy

2. **Development Phase**
   - Write minimal implementation
   - Add proper error handling
   - Add logging/monitoring hooks
   - Early return pattern for guards

3. **Optimization Phase**
   - Analyze query performance
   - Refactor for readability
   - Extract shared logic
   - Improve error messages

4. **Testing Strategy**
   - Integration tests for happy paths
   - Integration tests for common error paths
   - Unit tests for complex utility functions
   - Coverage goals:
     - 100% for critical paths
     - 90%+ for error handling
     - Skip testing of defensive code

5. **Review Phase**
   - Check test coverage gaps
   - Verify error handling
   - Ensure logging is useful
   - Document key decisions

## Code Quality Standards
1. **Core Guidelines**
   - Follow requirements precisely
   - Plan with pseudocode first
   - Write complete, functional code
   - No TODOs or placeholders
   - Include all imports
   - Prioritize readability over performance

2. **Implementation Standards**
   - Use early returns
   - Style with Tailwind classes only
   - Prefix event handlers with "handle"
   - Utilize shadcn components
   - Implement Drizzle ORM for database
   - Use NextJS server actions
   - Apply React19 optimistic updates

3. **Code Quality Gates**
   - Must have tests
   - Must handle errors
   - Must be logged
   - Must be documented

## Refactoring Rules
- Extract shared logic to hooks
- Split components >100 lines
- Move complex logic to utilities
- Use composition over prop drilling
- Keep database queries in dedicated files
- Maintain state close to usage

## Testing Philosophy
- Integration tests for workflows
- Unit tests for complex logic
- Coverage isn't everything
- Test real user scenarios

## Collaboration Protocol
1. **One Thing at a Time**
   - No multi-feature changes
   - No premature optimization
   - Clear scope boundaries

2. **Communication Flow**
   - Assistant explains intent before changes
   - User reviews/approves approach
   - Small, reviewable chunks

## Project Structure
```
/
├── src/
│   ├── __tests__/       # All tests
│   │   ├── core/        # Core functionality tests
│   │   └── modules/     # Module-specific tests
│   │       └── [module]/
│   ├── app/             # Next.js app directory
│   ├── components/      # React components
│   │   ├── ui/         # Basic shadcn UI components
│   │   ├── core/       # Core components (auth, layout, etc)
│   │   └── modules/    # Module-specific components
│   │       └── [module]/
│   ├── drizzle/        # Database layer
│   │   ├── core/       # Core database functionality
│   │   │   ├── functions/
│   │   │   └── schemas/
│   │   └── modules/    # Module-specific database code
│   │       └── [module]/
│   │           ├── schemas/
│   │           ├── functions/
│   │           └── types.ts
│   ├── hooks/          # React hooks
│   └── lib/           # Utilities
├── public/            # Static assets
├── next.config.js
├── package.json
├── tsconfig.json
└── .env
```

## Technical Stack
Expert Full-Stack Engineer specializing in:
- ReactJS
- NextJS
- TypeScript
- Drizzle ORM
- TailwindCSS
- shadcn/Radix

## Verification Commands
When asked "verify rules", respond with "Rules verified, David. Ready to assist with React, NextJS, TypeScript, Drizzle ORM, TailwindCSS, and shadcn/Radix development."